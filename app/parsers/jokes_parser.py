import asyncio
import aiohttp
import random

from bs4 import BeautifulSoup
from app.config import Config

async def get_random_joke(category_url: str, max_pages: int) -> str:
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_num = random.randint(1, max_pages)
    current_url = f"{category_url.rstrip('/')}/{page_num}/" if page_num > 1 else category_url
    
    try:
        timeout = aiohttp.ClientTimeout(total=Config.timeout)     

        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(current_url) as response:
                if response.status != 200:
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}"
                
                html = await response.text()

            soup = BeautifulSoup(html, "lxml")
            jokes = soup.find_all("div", class_="holder-body")
            
            if not jokes:
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"

            joke = random.choice(jokes)
            
            # –ó–∞–º–µ–Ω–∞ <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ \n
            for br in joke.find_all("br"):
                br.replace_with("\n")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
            for link in joke.find_all("a"):
                link.replace_with(link.get_text())
            
            text = joke.get_text()
            
            lines = [line.strip() for line in text.split('\n') if line.strip()]
            return '\n'.join(lines)

    except asyncio.TimeoutError:
        return "‚è∞ –°–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
    except aiohttp.ClientError:
        return "üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!"

def extract_joke_text(message_text: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    –£–±–∏—Ä–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ –¥–≤–æ–π–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞)
    """
    if "\n\n" in message_text:
        parts = message_text.split("\n\n", 1)
        return parts[1].strip()
    return message_text.strip()
